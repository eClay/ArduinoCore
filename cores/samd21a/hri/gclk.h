#ifndef ECLAY_HRI_GCLK_H
#define ECLAY_HRI_GCLK_H

#include <sam.h>

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


#ifdef __cplusplus
extern "C" {
#endif


typedef enum {
  HRI_GCLK_GENERATOR_0 = GCLK_CLKCTRL_GEN_GCLK0_Val,
  HRI_GCLK_GENERATOR_1 = GCLK_CLKCTRL_GEN_GCLK1_Val,
  HRI_GCLK_GENERATOR_2 = GCLK_CLKCTRL_GEN_GCLK2_Val,
  HRI_GCLK_GENERATOR_3 = GCLK_CLKCTRL_GEN_GCLK3_Val,
  HRI_GCLK_GENERATOR_4 = GCLK_CLKCTRL_GEN_GCLK4_Val,
  HRI_GCLK_GENERATOR_5 = GCLK_CLKCTRL_GEN_GCLK5_Val,
  HRI_GCLK_GENERATOR_6 = GCLK_CLKCTRL_GEN_GCLK6_Val,
  HRI_GCLK_GENERATOR_7 = GCLK_CLKCTRL_GEN_GCLK7_Val,
  HRI_GCLK_GENERATOR_8 = GCLK_CLKCTRL_GEN_GCLK8_Val,
} hri_gclk_generator_t;

typedef enum {
  HRI_GCLK_SOURCE_XOSC      = GCLK_GENCTRL_SRC_XOSC_Val,
  HRI_GCLK_SOURCE_GCLKIN    = GCLK_GENCTRL_SRC_GCLKIN_Val,
  HRI_GCLK_SOURCE_GCLKGEN1  = GCLK_GENCTRL_SRC_GCLKGEN1_Val,
  HRI_GCLK_SOURCE_OSCULP32K = GCLK_GENCTRL_SRC_OSCULP32K_Val,
  HRI_GCLK_SOURCE_OSC32K    = GCLK_GENCTRL_SRC_OSC32K_Val,
  HRI_GCLK_SOURCE_XOSC32K   = GCLK_GENCTRL_SRC_XOSC32K_Val,
  HRI_GCLK_SOURCE_OSC8M     = GCLK_GENCTRL_SRC_OSC8M_Val,
  HRI_GCLK_SOURCE_DFLL48M   = GCLK_GENCTRL_SRC_DFLL48M_Val,
  HRI_GCLK_SOURCE_FDFLL96M  = GCLK_GENCTRL_SRC_DPLL96M_Val,
} hri_gclk_source_t;

typedef enum {
  HRI_GCLK_PERIPHERAL_DFLL48M_REF      = GCLK_CLKCTRL_ID_DFLL48_Val,
  HRI_GCLK_PERIPHERAL_FDPLL            = GCLK_CLKCTRL_ID_FDPLL_Val,
  HRI_GCLK_PERIPHERAL_FDPLL_32K        = GCLK_CLKCTRL_ID_FDPLL32K_Val,
  HRI_GCLK_PERIPHERAL_WDT              = GCLK_CLKCTRL_ID_WDT_Val,
  HRI_GCLK_PERIPHERAL_RTC              = GCLK_CLKCTRL_ID_RTC_Val,
  HRI_GCLK_PERIPHERAL_EIC              = GCLK_CLKCTRL_ID_EIC_Val,
  HRI_GCLK_PERIPHERAL_USB              = GCLK_CLKCTRL_ID_USB_Val,
  HRI_GCLK_PERIPHERAL_EVSYS_CHANNEL_0  = GCLK_CLKCTRL_ID_EVSYS_0_Val,
  HRI_GCLK_PERIPHERAL_EVSYS_CHANNEL_1  = GCLK_CLKCTRL_ID_EVSYS_1_Val,
  HRI_GCLK_PERIPHERAL_EVSYS_CHANNEL_2  = GCLK_CLKCTRL_ID_EVSYS_2_Val,
  HRI_GCLK_PERIPHERAL_EVSYS_CHANNEL_3  = GCLK_CLKCTRL_ID_EVSYS_3_Val,
  HRI_GCLK_PERIPHERAL_EVSYS_CHANNEL_4  = GCLK_CLKCTRL_ID_EVSYS_4_Val,
  HRI_GCLK_PERIPHERAL_EVSYS_CHANNEL_5  = GCLK_CLKCTRL_ID_EVSYS_5_Val,
  HRI_GCLK_PERIPHERAL_EVSYS_CHANNEL_6  = GCLK_CLKCTRL_ID_EVSYS_6_Val,
  HRI_GCLK_PERIPHERAL_EVSYS_CHANNEL_7  = GCLK_CLKCTRL_ID_EVSYS_7_Val,
  HRI_GCLK_PERIPHERAL_EVSYS_CHANNEL_8  = GCLK_CLKCTRL_ID_EVSYS_8_Val,
  HRI_GCLK_PERIPHERAL_EVSYS_CHANNEL_9  = GCLK_CLKCTRL_ID_EVSYS_9_Val,
  HRI_GCLK_PERIPHERAL_EVSYS_CHANNEL_10 = GCLK_CLKCTRL_ID_EVSYS_10_Val,
  HRI_GCLK_PERIPHERAL_EVSYS_CHANNEL_11 = GCLK_CLKCTRL_ID_EVSYS_11_Val,
  HRI_GCLK_PERIPHERAL_SERCOMX_SLOW     = GCLK_CLKCTRL_ID_SERCOMX_SLOW_Val,
  HRI_GCLK_PERIPHERAL_SERCOM0_CORE     = GCLK_CLKCTRL_ID_SERCOM0_CORE_Val,
  HRI_GCLK_PERIPHERAL_SERCOM1_CORE     = GCLK_CLKCTRL_ID_SERCOM1_CORE_Val,
  HRI_GCLK_PERIPHERAL_SERCOM2_CORE     = GCLK_CLKCTRL_ID_SERCOM2_CORE_Val,
  HRI_GCLK_PERIPHERAL_SERCOM3_CORE     = GCLK_CLKCTRL_ID_SERCOM3_CORE_Val,
  HRI_GCLK_PERIPHERAL_SERCOM4_CORE     = GCLK_CLKCTRL_ID_SERCOM4_CORE_Val,
  HRI_GCLK_PERIPHERAL_SERCOM5_CORE     = GCLK_CLKCTRL_ID_SERCOM5_CORE_Val,
  HRI_GCLK_PERIPHERAL_TCC0_TCC1        = GCLK_CLKCTRL_ID_TCC0_TCC1_Val,
  HRI_GCLK_PERIPHERAL_TCC2_TC3         = GCLK_CLKCTRL_ID_TCC2_TC3_Val,
  HRI_GCLK_PERIPHERAL_TC4_TC5          = GCLK_CLKCTRL_ID_TC4_TC5_Val,
  HRI_GCLK_PERIPHERAL_TC6_TC7          = GCLK_CLKCTRL_ID_TC6_TC7_Val,
  HRI_GCLK_PERIPHERAL_ADC              = GCLK_CLKCTRL_ID_ADC_Val,
  HRI_GCLK_PERIPHERAL_AC_DIGITAL       = GCLK_CLKCTRL_ID_AC_DIG_Val,
  HRI_GCLK_PERIPHERAL_AC_ANALOG        = GCLK_CLKCTRL_ID_AC_ANA_Val,
  HRI_GCLK_PERIPHERAL_DAC              = GCLK_CLKCTRL_ID_DAC_Val,
  HRI_GCLK_PERIPHERAL_PTC              = GCLK_CLKCTRL_ID_PTC_Val,
  HRI_GCLK_PERIPHERAL_I2S_0            = GCLK_CLKCTRL_ID_I2S_0_Val,
  HRI_GCLK_PERIPHERAL_I2S_1            = GCLK_CLKCTRL_ID_I2S_1_Val,
#ifdef TCC3
  HRI_GCLK_PERIPHERAL_TCC3             = GCLK_CLKCTRL_ID_TCC3_Val,
#endif
} hri_gclk_peripheral_t;

typedef uint16_t hri_gclk_divisor_t;

typedef enum {
  HRI_GCLK_DIVIDE_NORMAL = 0,
  HRI_GCLK_DIVIDE_POW2 = 1,
} hri_gclk_divide_selection_t;


void HRI_GCLK_Initialize( void );

static inline void HRI_GCLK_Divisor_Set( 
    hri_gclk_generator_t generator,
    hri_gclk_divisor_t divisor
  );

static inline void HRI_GCLK_Source_Enable( 
    hri_gclk_generator_t generator,
    hri_gclk_source_t source,
    bool improve_duty_cycle,
    bool output_off_value,
    bool output_enable,
    hri_gclk_divide_selection_t divide_selection,
    bool run_in_standby
  );

static inline void HRI_GCLK_Source_Disable( 
    hri_gclk_generator_t generator
  );

static inline void HRI_GCLK_PeripheralClock_Enable(
    hri_gclk_generator_t generator,
    hri_gclk_peripheral_t peripheral,
    bool write_lock
  );

static inline void HRI_GCLK_PeripheralClock_Disable(
    hri_gclk_peripheral_t peripheral
  );


#define INCLUDE_HRI_GCLK_INLINE_H
#include "src/hri_gclk_inline.h"
#undef INCLUDE_HRI_GCLK_INLINE_H


#ifdef __cplusplus
}
#endif

#endif  // ECLAY_HRI_GCLK_H
